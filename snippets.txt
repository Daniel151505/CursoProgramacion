{

"Cadena de Conexion":{

	"prefix" : "Cadena de conexion",
	"body": [
		" 'ConnectionStrings' : {",
			"'postgress-db' : 'Host=;Database=;Username=;Password=;Port=;SSL Mode= Require;Trust Server Certificate=true'",
		  "},"
	],
	"description": "Cadena de conexión"

},


"datalocation": {
	"prefix" : "Data Location",
	"body": [
		"services.AddDbContext<DatabaseContext>(options =>",
		"options.UseNpgsql(",
			"Configuration.GetConnectionString('Nombre de la cadena de conexion')));"
	],
	"description": "Locacion de la data"

},

"metodos": {

	"prefix": "Metodo",
	"body" : [
        " public int nombreMetodo {get;set;} "
	],
	"description": "Creación de Metodos"

},

"Editar Primero": {

	"prefix": "Editar Primero",
	"body" : [
		
		
		"public async Task<IActionResult> Editar (int? id){",
            
            "if(id ==null){",
                "return NotFound();",
            "}",

            "var asignar nombre de la variable = await _context.nombre de base de DbSet.FindAsync(id);",
            "if (asignar nombre de la variable == null){",
                "return NotFound();",
            "}",
            "return View (asignar nombre de la variable);",

        "}"


	],
	"description": "Editar Primero"

},



"Editar Segundo": {

	"prefix": "Editar Segundo",
	"body" : [
		
		
		"[HttpPost]",
        "[ValidateAntiForgeryToken]",
        "public async Task<IActionResult> Editar(int id, [Bind ('campos')] nombre del Modelo con los metodos - asignar nombre al prametro){",
            
            "if(id != nombre del parametro.tu Id que has puesto el campos){",
                "return NotFound();",
            "}",

            "if(ModelState.IsValid){",
                "try{",
                    "_context.Update(nombre del parametro);",
                    "await _context.SaveChangesAsync();",
                "}",
                "catch(DbUpdateConcurrencyException){",
                    "return NotFound();",
                "}",
                
                "return RedirectToAction(nameof(la vista que quieres despues de que se edita));",
                
            "}",
            "return View(nombre del parametro);",
        "}"

	],
	"description": "Editar Segundo"

},

"Eliminar": {

	"prefix": "Eliminar",
	"body" : [
		
		
		"public IActionResult Eliminar(int ? id){",

            "var asignar nombre de la variable = _context.nombre de base de DbSet.Find(id);",
            "_context.nombre de base de DbSet.Remove(asignar nombre de la variable);",
            "_context.SaveChanges();",
            "return RedirectToAction(nameof(la vista que quieres despues de que se elimina));",
        "}"
	],
	"description": "Elimninar"

}




}